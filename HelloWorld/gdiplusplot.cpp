// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "gdiplusplot.h"

/////////////////////////////////////////////////////////////////////////////
// CGDIPlusPlot

IMPLEMENT_DYNCREATE(CGDIPlusPlot, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CGDIPlusPlot properties

CString CGDIPlusPlot::GetCaption()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CGDIPlusPlot::SetCaption(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

BOOL CGDIPlusPlot::GetXTime()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CGDIPlusPlot::SetXTime(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

CString CGDIPlusPlot::GetXLabel()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CGDIPlusPlot::SetXLabel(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CGDIPlusPlot::GetYLabel()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CGDIPlusPlot::SetYLabel(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

short CGDIPlusPlot::GetInterval()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CGDIPlusPlot::SetInterval(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

CString CGDIPlusPlot::GetAnnolabel()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CGDIPlusPlot::SetAnnolabel(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

BOOL CGDIPlusPlot::GetXTrack()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CGDIPlusPlot::SetXTrack(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CGDIPlusPlot operations

void CGDIPlusPlot::PlotXY(double xValue, double yValue, short index)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_I2;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 xValue, yValue, index);
}

void CGDIPlusPlot::SetRange(double xMin, double xMax, double yMin, double yMax)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 xMin, xMax, yMin, yMax);
}

void CGDIPlusPlot::PlotY(double newValue, short index)
{
	static BYTE parms[] =
		VTS_R8 VTS_I2;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 newValue, index);
}

void CGDIPlusPlot::ClearGraph()
{
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGDIPlusPlot::AddElement(short color)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 color);
}

void CGDIPlusPlot::IsElementVisible(short index, BOOL visible)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 index, visible);
}

void CGDIPlusPlot::SetXCursorPos(double xValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 xValue);
}
